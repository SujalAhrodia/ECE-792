---
 - hosts: localhost
   become: true
   vars:
    vmVar: "{{ lookup('file', './inputs/input.json') | from_json }}"
    swVar: "{{ lookup('file', './inputs/switches.json') | from_json }}"
   tasks:
    - name: Add dependencies via pip
      pip:
        name: lxml

    - name: Add dependencies via apt
      apt:
        name: dnsmasq
        state: present

    - name: Create OVS bridges
      openvswitch_bridge:
        bridge: "{{item.name}}"
        state: present
      with_items:
        - "{{swVar.input}}"
      tags:
        - create_ovs

    - name: Assign IP to switches
      command: sudo ip addr add {{item.IP}} dev {{item.name}}
      with_items:
        - "{{swVar.input}}"
      when: item.IP is defined
      tags:
        - route
    
    - name: Start the switches
      command: sudo ip link set dev {{item.name}} up
      with_items:
        - "{{swVar.input}}"
      tags:
        - init

    # Part 2: Defining the networks
    - name: Define network
      virt_net:
        command: define
        name: "{{item.0}}"
        xml: "{{ lookup('template','./networks/{{item.1}}') }}"
      with_together:
        - ["Internet", "L2", "L3", "Other"]
        - ["Internet.xml.j2", "L2.xml.j2", "L3.xml.j2", "Other.xml.j2"]
      tags:
        - define_ovs_network
    
    - name: Start network
      virt_net:
        command: start
        name: "{{item}}"
      with_items:
        - Internet
        - L2
        - L3
        - Other
      tags:
        - start_ovs_net
    
      #Add DNS Config via dnsmasq only for Internet
    - name: Check file exists.
      stat:
        path: /etc/dnsmasq.d/dnsmasq.conf
      register: p

    - name: Flush dnsmasq.conf
      command: 'cp /dev/null /etc/dnsmasq.d/dnsmasq.conf'
      when:  p.stat.exists

    - name: DNS Config
      command: bash mydns.sh {{item.name}} {{item.IP}} 
      with_items:
        - "{{swVar.input}}"
      when: "'q2sw1' in item.name or 'q2sw3' in item.name"
      
      #Add ip table rule for Internet
    - name: Configuring iptables for Internet
      command: bash rule.sh {{item.IP}} {{item.name}} 
      with_items:
        - "{{swVar.input}}"
      when: "'q2sw1' in item.name"
      tags:
        - iptable
        
    - name: Making list of input VMs 
      vars: 
        VMS: []
      set_fact:
        VMS: "{{ VMS + [item.name] }}"
      with_items:
        - "{{vmVar.input}}"
      tags:
        - make_vm_list

    - name: Get existing VMs
      virt:
        command: list_vms
      register: result

    # VM creation
    - name: Create VMs
      command: virt-clone --original base -n {{item}} --auto-clone
      with_items:
        - "{{VMS}}"
      when: item not in result.list_vms
      tags:
        - create_vm
    
    - name: Start VMs
      virt:
        name: "{{item}}"
        state: running
      with_items:
        - "{{VMS}}"
    
    # Attaching interfaces
    - include_tasks: step1.yml
      with_items:
        - "{{VMS}}"
      loop_control:
        loop_var: outer_item

    # Run dhclient inside each VMs
    
